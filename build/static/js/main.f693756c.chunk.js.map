{"version":3,"sources":["lib/hcert-parser.ts","components/CPVQrReader/index.ts","components/CPVQrReader/CPVQrReader.tsx","lib/typed-array.ts","lib/certificates.ts","lib/zlib.ts","lib/valuesets/common.ts","lib/valuesets/disease-agent-targeted.ts","lib/valuesets/test-result.ts","lib/hcert-verification.ts","lib/time.ts","components/CPVQrDataTable/CPVQrDataTable.tsx","lib/valuesets/vaccine-prophylaxis.ts","lib/valuesets/vaccine-medicinal-product.ts","lib/valuesets/vaccine-manufacturer.ts","lib/valuesets/test-type.ts","lib/valuesets/test-manufacturer.ts","components/CPVQrDataTable/index.ts","components/CPVScanner/CPVScanner.tsx","components/CPVScanner/index.ts","content/CPVLandingPage/index.ts","content/CPVLandingPage/CPVLandingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CBORTags","COSEHeaderParameters","COSESignatureAlgoritms","CWTClaims","HCERTClaims","CPVQrReader","onQrData","onScan","data","onError","err","alert","facingMode","equal8","a","b","compare","i","length","certificates","map","cert","kid","Uint8Array","from","crt","findCertificate","find","EXCLUDED_KIDS","parseBarcode","payload","test","console","info","version","includes","localStorage","setItem","Error","stripped","substring","base45","decode","parseHCERT","barcodePayload","cwt","pako","inflate","coseSignedMsg","cbor","tag","COSESign","COSESign1","value","prot","p","alg","get","Algorithm","ES256_SHA256","KeyIdentifier","isExcluded","some","ekid","sig","undefined","toString","pub","cose","verify","key","warn","claims","iss","Issuer","iat","IssuedAt","exp","ExpirationTime","hcert","HealthCertificate","DigitalHealthCertificate","getFromValueSetValues","obj","Object","keys","isKeyOf","display","TargetDisease","TestResult","getTargetDisease","tg","valueSetValues","HCERTStatus","validateHCERT","UnverifiedSignature","now","Math","floor","Date","Expired","v","vg","filter","vv","COVID19","NotVaccinated","grouped","reduce","acc","curr","vp","values","group","sd","parseInt","dn","required","got","d","PartiallyVaccinated","FullyVaccinated","validateVaccinationGroup","t","sort","tt","localeCompare","tr","Positive","Negative","format","Intl","DateTimeFormat","dateStyle","timeStyle","timeZone","formatTimestamp","timestamp","hcertMetadataMappings","General","h","Personal","nam","fn","gn","dob","hcertVaccineMappings","Vaccine","mp","ma","Dose","dt","co","is","hcertTestMappings","Test","nm","sc","tc","TTT","abc","log","CPVQrDataTable","qrData","onHCERTStatus","useState","setHCERT","useEffect","status","error","getHCERT","Accordion","className","AccordionItem","title","open","entries","mappings","Table","size","TableHead","TableRow","TableHeader","colSpan","TableBody","label","mapper","TableCell","width","idx","CodeSnippet","type","feedback","wrapText","hcertStatusMapping","icon","CPVCertificateStatus","mapped","join","CPVScanner","isScanning","setIsScanning","setQrData","setStatus","Grid","condensed","Row","Column","sm","Button","onClick","kind","CPVLandingPage","href","target","rel","process","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f693756c.chunk.js","sourcesContent":["import base45 from 'base45-js/lib/base45-js';\nimport * as cbor from 'cbor-web';\nimport * as cose from 'cose-js';\n\nimport { equal8 } from '@cpv/lib/typed-array';\nimport { inflate } from '@cpv/lib/zlib';\nimport { HCERT } from '@cpv/lib/hcert';\nimport { findCertificate } from '@cpv/lib/certificates';\n\n/** CBOR tags used for COSE message identification. */\nenum CBORTags {\n  COSESign = 98,\n  COSESign1 = 18,\n}\n\n/** Common COSE header parameters. */\nenum COSEHeaderParameters {\n  Algorithm = 1, // alg\n  CriticalHeaders = 2, // crit\n  ContentType = 3, // content type\n  KeyIdentifier = 4, // kid\n  InitialisationVector = 5, // IV\n  PartialInitialisationVector = 6, // Partial IV\n  CounterSignature = 7, // counter signature\n}\n\n/** COSE signature algorithms used to verify the signature. */\nenum COSESignatureAlgoritms {\n  ES256_SHA256 = -7,\n}\n\n/** Claims in the CBOR Web Token. */\nenum CWTClaims {\n  Issuer = 1, // iss\n  IssuedAt = 6, // iat\n  ExpirationTime = 4, // exp\n  HealthCertificate = -260, // hcert\n}\n\n/**\n * Claims in a Health Certificate.\n * Note: Currently all government-issued certificates share the same claim key.\n */\nenum HCERTClaims {\n  DigitalHealthCertificate = 1, // eu_dgc_v1, this claim is the same for NHS COVID Passes too.\n}\n\n/** List of KIDs to exclude from the COSE signature verification. */\nconst EXCLUDED_KIDS: Uint8Array[] = [\n  Uint8Array.from([217, 25, 55, 95, 193, 231, 182, 178]), // https://dgc.a-sit.at/ehn test certificate\n];\n\n/**\n * Parses the given 2D barcode payload.\n * @return Compressed CBOR Web Token payload contained within the 2D barcode.\n */\nconst parseBarcode = (payload: string): Uint8Array => {\n  const supportedVersions = ['1'];\n\n  if (!/^HC[1-9A-Z]:/.test(payload)) {\n    payload = 'HC1:' + payload;\n    console.info('HCx Prefix not detected, added HC1 automatically.');\n    //throw new Error('missing HCERT context indetifier in barcode payload');\n  }\n\n  const version = payload[2];\n  if (!supportedVersions.includes(version)) {\n    localStorage.setItem('DGCReadComplete', 'true');\n    localStorage.setItem('DGCReadResult', 'Abort-UnknownVersion');\n    throw new Error(`unsupportted HCERT version: ${version}`);\n  }\n\n  // Strip off HCERT context identifier.\n  const stripped = payload.substring(4);\n  return new Uint8Array(base45.decode(stripped));\n};\n\n/**\n * Parses a HCERT payload as specified in\n * https://github.com/ehn-dcc-development/hcert-spec/releases/download/1.0.5/dgc_spec-1.0.5-final.pdf\n */\nexport const parseHCERT = async (barcodePayload: string): Promise<HCERT> => {\n  // The HCERT barcode payload is a compressed CBOR Web Token.\n  const cwt = inflate(parseBarcode(barcodePayload));\n\n  // CBOR Web Token is technically a signed COSE message (https://datatracker.ietf.org/doc/html/rfc8392#page-8).\n  const coseSignedMsg = cbor.decode(cwt);\n\n  // Validate the structure of the decoded CBOR structure.\n  if (\n    (coseSignedMsg.tag !== CBORTags.COSESign && coseSignedMsg.tag !== CBORTags.COSESign1) ||\n    coseSignedMsg.value.length !== 4\n  ) {\n    throw new Error('invalid COSE sign structure');\n  }\n\n  // Deconstruct the COSE sign structure (https://datatracker.ietf.org/doc/html/rfc8152#page-17)\n  const [prot, , payload] = coseSignedMsg.value; // Array content: [protected, unprotected, payload, signers]. We only use the protected header for now.\n\n  // Verify COSE signature.\n  const p = cbor.decode(prot);\n  const alg = p.get(COSEHeaderParameters.Algorithm);\n  if (alg !== COSESignatureAlgoritms.ES256_SHA256) {\n    throw new Error(`unsupported signature algorithm: ${alg}`);\n  }\n\n  const kid = p.get(COSEHeaderParameters.KeyIdentifier);\n\n  // Temporary exclusion of certificates we still need to acquire.\n  const isExcluded = EXCLUDED_KIDS.some((ekid) => equal8(kid, ekid));\n\n  let sig = isExcluded;\n\n  if (!isExcluded) {\n    const crt = findCertificate(kid);\n    if (crt === undefined) {\n      localStorage.setItem('DGCReadComplete', 'true');\n      localStorage.setItem('DGCReadResult', 'Abort-UnknownSigning');\n      throw new Error(`could not find certificate for kid: ${kid.toString('hex')}`);\n    }\n\n    if (crt.pub === null) {\n      localStorage.setItem('DGCReadComplete', 'true');\n      localStorage.setItem('DGCReadResult', 'Abort-UnknownSigning');\n      throw new Error(`could not find public key in certificate for kid: ${kid.toString('hex')}`);\n    }\n\n    try {\n      await cose.sign.verify(cwt, { key: crt.pub });\n      sig = true;\n    } finally {\n      // Do nothing here, sig is either false or true depending whether cose.sign.verify threw or not.\n    }\n  } else {\n    console.warn('TEST SIGNING');\n    localStorage.setItem('DGCReadComplete', 'true');\n    localStorage.setItem('DGCReadResult', 'Abort-TestSigning');\n  }\n\n  // Decode the claims in the payload.\n  const claims = cbor.decode(payload);\n\n  const iss = claims.get(CWTClaims.Issuer);\n  const iat = claims.get(CWTClaims.IssuedAt);\n  const exp = claims.get(CWTClaims.ExpirationTime);\n  const hcert = claims.get(CWTClaims.HealthCertificate).get(HCERTClaims.DigitalHealthCertificate);\n\n  return { iss, iat, exp, hcert, sig };\n};\n","import { CPVQrReader } from './CPVQrReader';\n\nexport default CPVQrReader;\n","import QrReader from 'react-qr-reader';\n\ntype Props = {\n  onQrData: (data: string) => void;\n};\n\nexport const CPVQrReader = ({ onQrData }: Props): JSX.Element => {\n  const handleScan = (data: string | null): void => {\n    if (data != null) {\n      onQrData(data);\n    }\n  };\n\n  const handleError = (err: unknown): void => {\n    alert(err);\n  };\n\n  return <QrReader onScan={handleScan} onError={handleError} facingMode=\"environment\" />;\n};\n","export const equal8 = (a: Uint8Array, b: Uint8Array): boolean => compare(a, b);\n\nconst compare = (a: Uint8Array, b: Uint8Array): boolean => {\n  for (let i = a.length; -1 < i; i -= 1) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n};\n","import { equal8 } from '@cpv/lib/typed-array';\nimport rawCertificates from '@cpv/data/certificates.json';\n\nexport interface Certificate {\n  kid: Uint8Array;\n  crt: Uint8Array;\n  iss: { [tag: string]: string | undefined };\n  sub: { [tag: string]: string | undefined };\n  pub: { x: number[]; y: number[] } | null;\n}\n\nexport const certificates: Certificate[] = rawCertificates.map((cert) => ({\n  ...cert,\n  kid: Uint8Array.from(cert.kid),\n  crt: Uint8Array.from(cert.crt),\n}));\n\nexport const findCertificate = (kid: Uint8Array): Certificate | undefined =>\n  certificates.find((cert) => equal8(cert.kid, kid));\n\nexport const supportedIssuers = (): string[] => {\n  return Array.from(new Set(certificates.map((c) => `${c.iss.O}, ${c.iss.C}`))) as string[];\n};\n","import pako from 'pako';\n\n/**\n * Decompresses an arbitrary payload using the Deflate compression mechanism.\n */\nexport const inflate = (data: Uint8Array): Uint8Array => {\n  // Zlib magic headers:\n  // 78 01 - No Compression/low\n  // 78 9C - Default Compression\n  // 78 DA - Best Compression\n  if (data[0] === 0x78) {\n    return pako.inflate(data);\n  }\n  return data;\n};\n","function isKeyOf<T extends string>(obj: { [key in T]: unknown }, key: unknown): key is T {\n  if (key === null || typeof key !== 'string') return false;\n  return Object.keys(obj).includes(key);\n}\n\nexport function getFromValueSetValues<T extends string>(obj: { [key in T]: { display: string } }, key: string): string {\n  if (isKeyOf(obj, key)) {\n    return obj[key].display;\n  }\n\n  return `Unknown (${key})`;\n}\n","import { getFromValueSetValues } from '@cpv/lib/valuesets/common';\nimport { valueSetValues } from '@cpv/data/disease-agent-targeted.json';\n\nexport enum TargetDisease {\n  COVID19 = '840539006',\n}\n\nexport const getTargetDisease = (tg: string): string => getFromValueSetValues(valueSetValues, tg);\n","import { getFromValueSetValues } from '@cpv/lib/valuesets/common';\nimport { valueSetValues } from '@cpv/data/test-result.json';\n\nexport enum TestResult {\n  Negative = '260415000',\n  Positive = '260373001',\n}\n\nexport const getTestResult = (tr: string): string => getFromValueSetValues(valueSetValues, tr);\n","import { HCERT, TestEntry, VaccinationEntry } from '@cpv/lib/hcert';\nimport { TargetDisease } from './valuesets/disease-agent-targeted';\nimport { TestResult } from './valuesets/test-result';\n\nexport enum HCERTStatus {\n  FullyVaccinated = 0,\n  PartiallyVaccinated,\n  NotVaccinated,\n  Negative,\n  Positive,\n  Expired,\n  UnverifiedSignature,\n  Error,\n}\n\nconst validateVaccinationGroup = (vg: VaccinationEntry[]): HCERTStatus => {\n  // Filter out non-COVID-19 vaccines.\n  const v = vg.filter((vv) => vv.tg === TargetDisease.COVID19);\n\n  if (v.length === 0) return HCERTStatus.NotVaccinated;\n\n  if (v.length > 0) {\n    // Group doses by vaccine.\n    const grouped = v.reduce((acc, curr) => {\n      acc[curr.vp] = [...(acc[curr.vp] || []), curr];\n      return acc;\n    }, {} as { [key: string]: VaccinationEntry[] });\n\n    // For each vaccine get the doses required and current doses.\n    const doses = Object.values(grouped).map((group) =>\n      group.reduce(\n        (acc, curr) => {\n          const sd = parseInt(curr.sd, 10);\n          const dn = parseInt(curr.dn, 10);\n\n          if (acc.required < sd) acc.required = sd;\n          if (acc.got < dn) acc.got = dn;\n\n          return acc;\n        },\n        { required: 0, got: 0 },\n      ),\n    );\n\n    // Check if there's at least one vaccine for which all doses have been administered.\n    const hasAllDoses = doses.some((d) => d.required === d.got);\n\n    if (!hasAllDoses) return HCERTStatus.PartiallyVaccinated;\n  }\n\n  return HCERTStatus.FullyVaccinated;\n};\n\nconst validateTestGroup = (t: TestEntry[]): HCERTStatus => {\n  // ISO-8601 dates can be lexicographically ordered.\n  const latestTest = t.sort((a, b) => b.tt.localeCompare(a.tt))[0];\n\n  if (latestTest.tr === TestResult.Positive) return HCERTStatus.Positive;\n  return HCERTStatus.Negative;\n};\n\nexport const validateHCERT = ({ iat, exp, hcert, sig }: HCERT): HCERTStatus => {\n  if (!sig) return HCERTStatus.UnverifiedSignature;\n\n  const now = Math.floor(Date.now() / 1000);\n\n  if (iat > now) return HCERTStatus.Expired;\n  if (exp < now) return HCERTStatus.Expired;\n\n  if (hcert.v) return validateVaccinationGroup(hcert.v);\n  else if (hcert.t) return validateTestGroup(hcert.t);\n  else return HCERTStatus.Error;\n};\n","const format = new Intl.DateTimeFormat('en-GB', {\n  dateStyle: 'medium',\n  timeStyle: 'medium',\n  timeZone: 'UTC',\n});\n\nexport const formatTimestamp = (timestamp: number): string => {\n  return format.format(new Date(timestamp * 1e3));\n};\n\nexport const formatISO8601Timestamp = (timestamp: string): string => {\n  return format.format(new Date(timestamp));\n};\n","import { useEffect, useState } from 'react';\nimport {\n  Accordion,\n  AccordionItem,\n  CodeSnippet,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableHeader,\n  TableCell,\n} from 'carbon-components-react';\n\nimport { HCERT, TestEntry, VaccinationEntry } from '@cpv/lib/hcert';\nimport { parseHCERT } from '@cpv/lib/hcert-parser';\nimport { validateHCERT, HCERTStatus } from '@cpv/lib/hcert-verification';\nimport { formatISO8601Timestamp, formatTimestamp } from '@cpv/lib/time';\n// import { getCountry } from '@cpv/lib/valuesets/country-2-codes';\nimport { getTargetDisease } from '@cpv/lib/valuesets/disease-agent-targeted';\nimport { getVaccineProphylaxis } from '@cpv/lib/valuesets/vaccine-prophylaxis';\nimport { getVaccineMedicinalProduct } from '@cpv/lib/valuesets/vaccine-medicinal-product';\nimport { getVaccineManufacturer } from '@cpv/lib/valuesets/vaccine-manufacturer';\nimport { getTestResult } from '@cpv/lib/valuesets/test-result';\nimport { getTestManufacturer } from '@cpv/lib/valuesets/test-manufacturer';\nimport { getTestType } from '@cpv/lib/valuesets/test-type';\n\ntype Props = {\n  qrData: string;\n  onHCERTStatus: (status: HCERTStatus) => void;\n};\n\ntype HCERTMappings<T> = {\n  [title: string]: {\n    [label: string]: (obj: T) => string | undefined;\n  };\n};\n\nconst hcertMetadataMappings: HCERTMappings<HCERT> = {\n  General: {\n    'Issuer Country': (h) => h.iss,\n    'Issued At': (h) => formatTimestamp(h.iat),\n    'Expires At': (h) => formatTimestamp(h.exp),\n  },\n  Personal: {\n    'Full Name': ({ hcert: { nam } }) => `${nam.fn} ${nam.gn}`,\n    'Date of Birth': ({ hcert }) => hcert.dob,\n  },\n};\n\n//localStorage.setItem('DGCData-IssuedAt', formatTimestamp(h.iat));\nconst hcertVaccineMappings: HCERTMappings<VaccinationEntry> = {\n  Vaccine: {\n    'Target Disease': (v) => getTargetDisease(v.tg),\n    Vaccine: (v) => getVaccineProphylaxis(v.vp),\n    'Vaccine Product': (v) => getVaccineMedicinalProduct(v.mp),\n    'Vaccine Manufacturer': (v) => getVaccineManufacturer(v.ma),\n    Dose: (v) => `${v.dn} / ${v.sd}`,\n    'Date of Vaccination': (v) => v.dt,\n    'Country of Vaccination': (v) => v.co,\n    'Certificate Issuer': (v) => v.is,\n  },\n};\n\nconst hcertTestMappings: HCERTMappings<TestEntry> = {\n  Test: {\n    'Target Disease': (t) => getTargetDisease(t.tg),\n    'Test Type': (t) => getTestType(t.tt),\n    'Test Manufacturer': (t) => t.nm || (t.ma && getTestManufacturer(t.ma)) || undefined,\n    'Test Time': (t) => formatISO8601Timestamp(t.sc),\n    'Test Result': (t) => getTestResult(t.tr),\n    'Testing Centre': (t) => t.tc,\n    'Country of Test': (t) => t.co,\n    'Certificate Issuer': (t) => t.is,\n  },\n  TTT: {\n    abc: (t) => {\n      console.log(t.tg);\n      return 'abc';\n    },\n  },\n};\nexport const CPVQrDataTable = ({ qrData, onHCERTStatus }: Props): JSX.Element => {\n  const [hcert, setHCERT] = useState<HCERT | null>(null);\n\n  useEffect(() => {\n    async function getHCERT() {\n      let status = HCERTStatus.Error;\n\n      try {\n        const hcert = await parseHCERT(qrData);\n        setHCERT(hcert);\n        status = validateHCERT(hcert);\n      } catch (e) {\n        console.error(e);\n      }\n\n      onHCERTStatus(status);\n    }\n\n    getHCERT();\n  }, [qrData]);\n\n  if (hcert === null) {\n    return <></>;\n  }\n\n  return (\n    <Accordion className=\"cpv-qr-data-parser__accordion\">\n      <AccordionItem title=\"Pass information\" open={true}>\n        {Object.entries(hcertMetadataMappings).map(([title, mappings]) => (\n          <Table key={title} size=\"sm\">\n            <TableHead>\n              <TableRow>\n                <TableHeader colSpan={2}>{title}</TableHeader>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {Object.entries(mappings).map(([label, mapper]) => (\n                <TableRow key={label}>\n                  <TableCell width=\"40%\">{label}</TableCell>\n                  <TableCell>{mapper(hcert)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        ))}\n\n        {hcert.hcert.v?.map((v, idx) =>\n          Object.entries(hcertVaccineMappings).map(([title, mappings]) => (\n            <Table key={title + idx} size=\"sm\">\n              <TableHead>\n                <TableRow>\n                  <TableHeader colSpan={2}>{title}</TableHeader>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {Object.entries(mappings).map(([label, mapper]) => (\n                  <TableRow key={label}>\n                    <TableCell width=\"40%\">{label}</TableCell>\n                    <TableCell>{mapper(v)}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )),\n        )}\n\n        {hcert.hcert.t?.map((t, idx) =>\n          Object.entries(hcertTestMappings).map(([title, mappings]) => (\n            <Table key={title + idx} size=\"sm\">\n              <TableHead>\n                <TableRow>\n                  <TableHeader colSpan={2}>{title}</TableHeader>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {Object.entries(mappings)\n                  .filter(([, mapper]) => mapper(t) !== undefined)\n                  .map(([label, mapper]) => (\n                    <TableRow key={label}>\n                      <TableCell width=\"40%\">{label}</TableCell>\n                      <TableCell>{mapper(t)}</TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n            </Table>\n          )),\n        )}\n      </AccordionItem>\n      <AccordionItem title=\"Barcode payload\">\n        <CodeSnippet type=\"multi\" feedback=\"Copied to clipboard\" wrapText={true}>\n          {qrData}\n        </CodeSnippet>\n      </AccordionItem>\n    </Accordion>\n  );\n};\n","import { getFromValueSetValues } from '@cpv/lib/valuesets/common';\nimport { valueSetValues } from '@cpv/data/vaccine-prophylaxis.json';\n\nexport const getVaccineProphylaxis = (vp: string): string => getFromValueSetValues(valueSetValues, vp);\n","import { getFromValueSetValues } from '@cpv/lib/valuesets/common';\nimport { valueSetValues } from '@cpv/data/vaccine-medicinal-product.json';\n\nexport const getVaccineMedicinalProduct = (mp: string): string => getFromValueSetValues(valueSetValues, mp);\n","import { getFromValueSetValues } from '@cpv/lib/valuesets/common';\nimport { valueSetValues } from '@cpv/data/vaccine-mah-manf.json';\n\nexport const getVaccineManufacturer = (ma: string): string => getFromValueSetValues(valueSetValues, ma);\n","import { getFromValueSetValues } from '@cpv/lib/valuesets/common';\nimport { valueSetValues } from '@cpv/data/test-type.json';\n\nexport const getTestType = (tt: string): string => getFromValueSetValues(valueSetValues, tt);\n","import { getFromValueSetValues } from '@cpv/lib/valuesets/common';\nimport { valueSetValues } from '@cpv/data/test-manf.json';\n\nexport const getTestManufacturer = (ma: string): string => getFromValueSetValues(valueSetValues, ma);\n","import { CPVQrDataTable } from './CPVQrDataTable';\n\nexport default CPVQrDataTable;\n","import { useState } from 'react';\nimport { Button, Grid, Row, Column } from 'carbon-components-react';\nimport { Misuse32, CheckmarkFilled32, CheckmarkFilledWarning32, AddAlt32 } from '@carbon/icons-react';\nimport CPVQrReader from '@cpv/components/CPVQrReader';\nimport CPVQrDataParser from '@cpv/components/CPVQrDataTable';\nimport { HCERTStatus } from '@cpv/lib/hcert-verification';\n\nconst hcertStatusMapping = {\n  [HCERTStatus.PartiallyVaccinated]: {\n    icon: <CheckmarkFilledWarning32 />,\n    label: 'Partially Vaccinated',\n    className: 'amber',\n  },\n  [HCERTStatus.FullyVaccinated]: {\n    icon: <CheckmarkFilled32 />,\n    label: 'Fully Vaccinated',\n    className: 'green',\n  },\n  [HCERTStatus.NotVaccinated]: {\n    icon: <Misuse32 />,\n    label: 'Not Vaccinated',\n    className: 'red',\n  },\n  [HCERTStatus.Negative]: {\n    icon: <CheckmarkFilled32 />,\n    label: 'Negative',\n    className: 'green',\n  },\n  [HCERTStatus.Positive]: {\n    icon: <AddAlt32 />,\n    label: 'Positive',\n    className: 'red',\n  },\n  [HCERTStatus.Expired]: {\n    icon: <Misuse32 />,\n    label: 'Expired',\n    className: 'red',\n  },\n  [HCERTStatus.UnverifiedSignature]: {\n    icon: <Misuse32 />,\n    label: 'Unverified Signature',\n    className: 'red',\n  },\n  [HCERTStatus.Error]: {\n    icon: <Misuse32 />,\n    label: 'Error',\n    className: 'red',\n  },\n};\n\nconst CPVCertificateStatus = ({ status }: { status: HCERTStatus }): JSX.Element => {\n  const mapped = hcertStatusMapping[status];\n\n  return (\n    <div className={['cpv-scanner__status', mapped.className].join(' ')}>\n      {mapped.icon}\n      <br />\n      {mapped.label}\n    </div>\n  );\n};\n\nexport const CPVScanner = (): JSX.Element => {\n  const [isScanning, setIsScanning] = useState<boolean>(false);\n  const [qrData, setQrData] = useState<string | null>(null);\n  const [status, setStatus] = useState<HCERTStatus | null>(null);\n\n  const startScanning = () => {\n    setQrData(null);\n    setIsScanning(true);\n  };\n\n  const stopScanning = () => setIsScanning(false);\n\n  const onQrData = (data: string) => {\n    setQrData(data);\n    setIsScanning(false);\n  };\n\n  const onHCERTStatus = (status: HCERTStatus) => {\n    setStatus(status);\n    const listOfStatus = [\n      'FullVaccination',\n      'PartialVaccination',\n      'NotVaccinated',\n      'TestResultNegative',\n      'TestResultPositive',\n      'TestResultExpired',\n      'SignatureVerificationError',\n      'UnknownError',\n    ];\n    console.log(status);\n    console.log(listOfStatus[status]);\n  };\n\n  return (\n    <>\n      {!isScanning && (\n        <Grid className=\"cpv-scanner__grid\" condensed={true}>\n          <Row>\n            <Column sm={2}>\n              <Button onClick={startScanning}>Scan QR Code</Button>\n            </Column>\n            <Column sm={2}>{status !== null && <CPVCertificateStatus status={status} />}</Column>\n          </Row>\n        </Grid>\n      )}\n      {isScanning && (\n        <div>\n          <Button kind=\"danger\" onClick={stopScanning}>\n            Stop scanning\n          </Button>\n          <CPVQrReader onQrData={onQrData} />\n        </div>\n      )}\n      {qrData && <CPVQrDataParser qrData={qrData} onHCERTStatus={onHCERTStatus} />}\n    </>\n  );\n};\n","import { CPVScanner } from './CPVScanner';\n\nexport default CPVScanner;\n","import { CPVLandingPage } from './CPVLandingPage';\n\nexport default CPVLandingPage;\n","import { LogoGithub16 } from '@carbon/icons-react';\nimport CPVScanner from '@cpv/components/CPVScanner';\n\nexport const CPVLandingPage = (): JSX.Element => (\n  <div className=\"bx--grid cpv-landing-page__grid\">\n    <div className=\"bx--row cpv-landing-page__banner\">\n      <div className=\"bx--col-lg-16\">\n        <h1 className=\"cpv-landing-page__heading\">COVID Pass Verifier</h1>\n        <h2 className=\"cpv-landing-page__subheading\">\n          Scan and verify HCERT compliant government-issued COVID-19 passes.\n        </h2>\n      </div>\n    </div>\n    <div className=\"bx--row\">\n      <div className=\"bx--col-lg-16\">\n        <p>Compatible with EU Digital COVID Certificates 🇪🇺 and NHS COVID Passes 🇬🇧.</p>\n      </div>\n    </div>\n    <div className=\"bx--row cpv-landing-page__scanner\">\n      <div className=\"bx--col-lg-16\">\n        <CPVScanner />\n      </div>\n    </div>\n    <div className=\"bx--row\">\n      <div className=\"bx--col-lg-16 cpv-landing-page__disclaimer\">\n        <p>\n          All processing (including scanning, parsing and verification) happens on the local device and no data is sent\n          to external servers.\n        </p>\n        <p>\n          Please{' '}\n          <a href=\"mailto:hello@covid-pass-verifier.com\" target=\"_blank\" rel=\"noreferrer\">\n            email me\n          </a>{' '}\n          at <span className=\"email\">hello@covid-pass-verifier.com</span> with any questions or concerns. The source\n          code for the entire web application is available{' '}\n          <a href=\"https://github.com/bcsongor/covid-pass-verifier\" target=\"_blank\" rel=\"noreferrer\">\n            on&nbsp;&nbsp;\n            <LogoGithub16 /> GitHub\n          </a>\n          .\n        </p>\n      </div>\n    </div>\n    <div className=\"bx--row\">\n      <div className=\"bx--col-lg-8 bx--offset-lg-4 bx--col-sm-2 bx--offset-sm-1 cpv-landing-page__footer\">\n        v{process.env.REACT_APP_GIT_DATE}-{process.env.REACT_APP_GIT_SHA}\n      </div>\n    </div>\n  </div>\n);\n","import { Route, Switch } from 'react-router-dom';\n\nimport '@cpv/app.scss';\nimport CPVLandingPage from '@cpv/content/CPVLandingPage';\n\nfunction App(): JSX.Element {\n  return (\n    <Switch>\n      <Route exact={true} path=\"/\" component={CPVLandingPage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport '@cpv/index.scss';\nimport App from '@cpv/App';\nimport reportWebVitals from '@cpv/reportWebVitals';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}